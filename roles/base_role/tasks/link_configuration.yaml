- name: "{{ origin_role_name }} - Block: link configuration"
  when: lookup('check_role_directory_existence', 'configuration')
  become: "{{ link_as_root }}"
  block:
    - name: "{{ origin_role_name }} - create parent configuration directory"
      when: not link_configuration_children
      file:
        path: "{{ configuration_destination | dirname }}"
        state: directory
        mode: "{{ configuration_mode }}"

    - name: "{{ origin_role_name }} - create configuration directory"
      when: link_configuration_children
      file:
        path: "{{ configuration_destination }}"
        state: directory
        mode: "{{ configuration_mode }}"

    - name: "{{ origin_role_name }} - force purge existing configuration directory"
      when:
        - link_configuration_children
        - force_to_overwrite
      file:
        path: "{{ configuration_destination }}"
        state: absent

    - name: "{{ origin_role_name }} - link configuration directory"
      when: not link_configuration_children
      file:
        src: "{{ configuration_source }}"
        dest: "{{ configuration_destination }}"
        state: link
        mode: "{{ configuration_mode }}"
        force: yes

    - name: "{{ origin_role_name }} - collect children from source configuration directory"
      when: link_configuration_children
      find:
        paths: "{{ configuration_source }}"
        file_type: any
      register: configuration_directory_children

    - name: "{{ origin_role_name }} - force purge existing children in the configuration directory"
      when:
        - link_configuration_children
        - force_to_overwrite
      file:
        path: "{{ configuration_destination }}/{{ item | relpath(configuration_source) }}"
        state: absent
      with_items:
        - "{{ configuration_directory_children.files | map(attribute='path') | list }}"

    - name: "{{ origin_role_name }} - link configuration children into target directory"
      when: link_configuration_children
      file:
        src: "{{ item }}"
        dest: "{{ configuration_destination }}/{{ item | relpath(configuration_source) }}"
        state: link
        mode: "{{ configuration_mode }}"
        force: yes
      with_items:
        - "{{ configuration_directory_children.files | map(attribute='path') | list }}"

    - name: "{{ origin_role_name }} - search for encrypted configuration files"
      when: link_configuration_children
      find:
        paths: "{{ configuration_source }}"
        contains: \$ANSIBLE_VAULT\;
        recurse: yes
      register: encrypted_files

    - name: "{{ origin_role_name }} - decrypt and copy encrypted configuration files"
      when: link_configuration_children
      copy:
        src: "{{ item }}"
        dest: "{{ configuration_destination }}/{{ item | relpath(configuration_source) }}"
        mode: 0400
        force: yes
      with_items:
        - "{{ encrypted_files.files | map(attribute='path') | list }}"
      ignore_errors: yes
      register: decryption_task

    # Fix CI test without the need to provide an actual vault password
    # TODO: Why does 'failed_when' not work on actual task?!
    - fail:
        msg: "{{ decryption_task.msg }}"
      when:
        - decryption.failed is defined and decryption_task.failed
        - lookup('env', 'USER') != 'circleci'
